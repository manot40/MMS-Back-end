openapi: 3.0.0

info:
  version: 0.1.8
  title: MR Management System
  description: "
    \n\n ## ðŸš€ Introduction
    \n\n MMS is an application that provides API logic for simple warehouse stock management with ease. Some key features:
    \n\n - Role based access
    \n\n - Transaction assessment
    \n\n - Monthly stock opname reporting
    \n\n - Empty stock reminder
    \n\n - Deployable to serverless
    \n\n - ...and much still in development
    \n\n This API Documented using OpenAPI 3.0.
    \n\n ## ðŸ”¨ Setup
    \n\n This app use express to run the web server, and mongoose (MongoDB) for model data mapping, which would need to set up node.js environment.
    \n\n ### Requirments
    \n\n - Computer with Windows 10 or Linux
    \n\n - Node.js 14 or greater
    \n\n - MongoDB [Atlas instance](https://mongodb.com/cloud/atlas)
    \n\n ### Configuration
    \n\n 1. Clone this repository, enter project directory
    \n\n 2. Rename `.env.example` file to `.env`
    \n\n 3. Open the `.env` file and customize the configuration
    \n\n The configuration consist of:
    \n\n ```
    \n\n # Application Configuration
    \n SVR_PORT        // Default app listen port
    \n CLUSTER         // Set to true to use nodejs multithread feature
    \n THREAD_LIMIT    // Adjust maximum cluster thread limit
    \n 
    \n\n # Database Configuration
    \n DB_HOST         // Database namehost
    \n DB_NAME         // Database name
    \n DB_USERNAME     // Database access username
    \n DB_PASSWORD     // Database access password
    \n 
    \n\n # CORS Configurations
    \n CORS_WHITELIST  // Provide whitelist site (separate with semicolons ';')
    \n 
    \n\n # JsonWebToken Configuration (JWT)
    \n JWT_ACCESSTOKEN_TTL     // JWT expiry time, use 'ms' format (https://github.com/vercel/ms)
    \n JWT_REFRESHTOKEN_TTL    // JWT refresh expiry time, use 'ms' format
    \n JWT_PRIVATE_KEY         // Specify private key to encrypt JWT token
    \n\n ```
    \n\n ### Installation
    \n\n Open terminal in project directory, and enter this command for development env:
    \n\n ```
    \n npm install
    \n npm run dev
    \n\n ```
    \n\n For production environment, instead use this command:
    \n\n ```
    \n npm install
    \n npm run build
    \n npm start
    \n\n ```
    \n\n This will install all dependencies and run the app.
    "
  license:
    name: ISC
    url: "https://spdx.org/licenses/ISC"

servers:
  - description: Server
    url: "/"

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: New User Registration
      description: "Registering new user, providing basic user information in request body \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      requestBody:
        description: New User Information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: New User Registration Completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: Auto-generated unique Object IDs
                        readOnly: true
                      username:
                        type: string
                        description: Username for user login credentials (Must unique)
                      name:
                        type: string
                        description: User real full name
                      role:
                        type: string
                        description: List of allowed node
                        default: user
                      affiliation:
                        type: string
                        description: User vendor affiliation
                      createdAt:
                        type: string
                        format: date-time
                        description: Time when this object was created
                      updatedAt:
                        type: string
                        format: date-time
                        description: Time when this object was updated
                  message:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate User Login
      description: "User Login Access. Returning JWT Access and/or Refresh Token used for client HTTP Header"
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Username for user login credentials (Must unique)
                password:
                  type: string
                  description: User password credentials
                rememberMe:
                  type: boolean
                  description: "Boolean indicating if user want their login to be remembered.\n\n(*When 'false' provided, server will returning 'accessToken' value in 'refreshToken' field instead*)"
        required: true
      responses:
        200:
          description: Credentials accepted, JWT Token granted to client
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access Token
                  refreshToken:
                    type: string
                    description: JWT Refresh Token
        400:
          $ref: "#/components/responses/400"
          example:
            success: false
            message: Password is too short - should be 6 chars minimum.
        401:
          $ref: "#/components/responses/401"
          example:
            success: false
            message: Username atau password salah!
        500:
          $ref: "#/components/responses/500"
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh User accessToken
      description: "Requesting new accessToken by providing active refreshToken to server"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: User active refresh token
        required: true
      responses:
        200:
          description: Refresh Token Accepted, new accessToken will be sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access Token
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /warehouse:
    get:
      tags:
        - Warehouse
      summary: Fetch Warehouses List
      description: "Get list of available warehouses, you can use query parameter to specify data querying rule"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/By"
      responses:
        200:
          description: Action completed successfully, warehouse(s) data will shown to user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Warehouse"
                  totalPages:
                    description: Total available rest of pages
                    type: number
                  message:
                    type: string
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  "/warehouse/{id}":
    get:
      tags:
        - Warehouse
      summary: Fetch Warehouse Data
      description: "Get warehouse data by specifying warehouse Object ID"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          $ref: "#/components/responses/Warehouse"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /admin/warehouse:
    post:
      tags:
        - Warehouse
      summary: Create New Warehouse
      description: "Create New Warehouse Data, providing warehouse information in document body \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      requestBody:
        description: New Warehouse Information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Warehouse"
        required: true
      responses:
        200:
          $ref: "#/components/responses/Warehouse"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  "/admin/warehouse/{id}":
    put:
      tags:
        - Warehouse
      summary: Update Warehouse Data
      description: "Update existing Warehouse Data, providing warehouse information in document body \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        description: New Warehouse Information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Warehouse"
        required: true
      responses:
        200:
          $ref: "#/components/responses/Warehouse"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Warehouse
      summary: Delete Warehouse Data
      description: "Delete existing Warehouse Data, providing warehouse id in path \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          description: Warehouse successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseSuccess"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /item:
    get:
      tags:
        - Item
      summary: Fetch Items List
      description: "Get list of available items, you can use query parameter to specify data querying rule"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Warehouse"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/By"
      responses:
        200:
          $ref: "#/components/responses/Items"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  "/item/{id}":
    get:
      tags:
        - Item
      summary: Fetch Item Data
      description: "Get item data by specifying warehouse Object ID"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          $ref: "#/components/responses/Item"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /admin/item:
    post:
      tags:
        - Item
      summary: Create New Item
      description: "Create New Item Data, providing Item information in document body \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        200:
          $ref: "#/components/responses/Item"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /admin/item/batch:
    post:
      tags:
        - Item
      summary: Create Batch of new Items
      description: "Create Batch of new Items Data, providing Items information in document body as array \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Item"
      responses:
        200:
          $ref: "#/components/responses/Items"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  "/admin/item/{id}":
    put:
      tags:
        - Item
      summary: Update Item Data
      description: "Update existing Item Data, providing Item information in document body \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        200:
          $ref: "#/components/responses/Item"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Item
      summary: Delete Item Data
      description: "Delete existing Item Data, providing Item id in path \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          description: Item successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseSuccess"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /transaction:
    get:
      tags:
        - Transaction
      summary: Fetch Transactions List
      description: "Get list of available Transactions, you can use query parameter to specify data querying rule"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/By"
      responses:
        200:
          $ref: "#/components/responses/Transactions"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - Transaction
      summary: Create New Transaction
      description: "Create New Transaction Data, providing Transaction information in document body"
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        200:
          $ref: "#/components/responses/Transaction"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  "/transaction/{id}":
    get:
      tags:
        - Transaction
      summary: Fetch Transaction Data
      description: "Get Transaction data by specifying transaction Object ID"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          $ref: "#/components/responses/Transaction"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Transaction
      summary: Update Transaction Data
      description: "Update existing Transaction Data, providing Transaction information in document body \n\n (**Only draft transaction can be udpated!**)"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        200:
          $ref: "#/components/responses/Transaction"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Transaction
      summary: Delete Transaction Data
      description: "Delete existing Transaction Data, providing Transaction id in path \n\n (**Only draft transaction can be deleted!**)"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          description: Transaction successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseSuccess"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /transaction/export:
    get:
      tags:
        - Transaction
      summary: Export Transaction Report
      description: "Download transaction report (xlsx format) of specific range of time"
      security:
       - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/startDate"
        - $ref: "#/components/parameters/endDate"
      responses:
        200:
          description: Report file will be send to client
          content:
            application/vnd.openxmlformats:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

components:
  schemas:
    User:
      required:
        - username
        - password
        - name
        - affiliation
      type: object
      properties:
        _id:
          type: string
          description: Auto-generated unique Object IDs
          readOnly: true
        username:
          type: string
          description: Username for user login credentials (Must unique)
        password:
          type: string
          description: User defined password
        name:
          type: string
          description: User real full name
        role:
          type: string
          description: List of allowed node
          enum:
            - user
            - admin
          default: user
        affiliation:
          type: string
          description: User vendor affiliation
        createdAt:
          type: string
          format: date-time
          description: Time when this object was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Time when this object was updated
          readOnly: true
    Warehouse:
      required:
        - name
        - address
        - enabled
      type: object
      properties:
        _id:
          type: string
          description: Auto-generated unique Object IDs
          readOnly: true
        name:
          type: string
          description: Warehouse name
        address:
          type: string
          description: Warehouse location address
        user:
          description: Last User who modified this object
          type: object
          readOnly: true
          properties:
            _id:
              description: User unique Object ID
              type: string
            name:
              description: User fullname
              type: string
        currPeriod:
          type: string
          format: date-time
          description: Current warehouse accounting period
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: Time when this object was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Time when this object was updated
          readOnly: true
    Item:
      required:
        - name
        - unit
        - type
        - warehouse
      type: object
      properties:
        _id:
          type: string
          description: Auto-generated unique Object IDs
          readOnly: true
        name:
          type: string
          description: Item name
        sku:
          type: string
          description: Item unique SKU code
        user:
          type: object
          description: Last User who modified this object
          readOnly: true
          properties:
            _id:
              description: User unique Object ID
              type: string
            name:
              description: User fullname
              type: string
        unit:
          type: string
          description: Item unit of measurement
          enum:
            - PCS
            - KG
            - LTR
            - BTL
            - SET
            - PSG
            - MTR
            - GLN
        type:
          description: Item type
          type: string
          enum:
            - chemical
            - consumable
        bufferStock:
          description: Item safe buffer stock quantity
          type: number
          default: 0
        warehouse:
          oneOf:
            - type: array
              description: Item warehouse Object ID
              items:
                type: string
            - type: array
              description: Item warehouse Object ID
              readOnly: true
              items:
                type: object
                properties:
                  _id:
                    description: Warehouse unique Object ID
                    type: string
                  name:
                    description: Warehouse name
                    type: string
        createdAt:
          type: string
          format: date-time
          description: Time when this object was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Time when this object was updated
          readOnly: true
    Transaction:
      required:
        - txDate
        - warehouse
      type: object
      properties:
        _id:
          type: string
          description: Auto-generated unique Object IDs
          readOnly: true
        user:
          type: object
          description: Last User who modified this object
          readOnly: true
          properties:
            _id:
              description: User unique Object ID
              type: string
            name:
              description: User fullname
              type: string
        txId:
          type: string
          description: Transaction unique ID
          readOnly: true
        txDate:
          type: string
          format: date
          description: Time when this transaction done
        description:
          type: string
          description: Additional transaction info
        type:
          type: string
          description: Transaction type
          default: out
          enum:
            - in
            - out
        status:
          description: Transaction status
          type: string
          default: draft
          readOnly: true
          enum:
            - draft
            - posted
            - closed
        warehouse:
          oneOf:
            - type: string
              description: Item warehouse Object ID
            - type: object
              description: Item warehouse Object ID
              readOnly: true
              properties:
                _id:
                  description: Warehouse unique Object ID
                  type: string
                name:
                  description: Warehouse name
                  type: string
        items:
          oneOf:
            - type: array
              description: List of items in this transaction
              items:
                required:
                  - item
                  - quantity
                type: object
                properties:
                  item:
                    description: Item unique Object ID
                    type: string
                  quantity:
                    description: Item quantity
                    type: number
            - type: array
              readOnly: true
              description: List of items in this transaction
              items:
                type: object
                properties:
                  item:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: Item unique Object ID
                      name:
                        type: string
                        description: Item name
                  quantity:
                    description: Item quantity
                    type: number
        createdAt:
          type: string
          format: date-time
          description: Time when this object was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Time when this object was updated
          readOnly: true
    ResponseError:
      type: object
      properties:
        success:
          type: boolean
          default: false
          readOnly: true
        message:
          type: string
          description: Message containing possible errors cause
          readOnly: true
        errors:
          type: object
          description: Object containing stacktrace errors
          readOnly: true
    ResponseSuccess:
      type: object
      properties:
        success:
          type: boolean
          default: true
          readOnly: true
        data:
          type: object
          description: Object containing requested data
          readOnly: true
        message:
          type: string
          description: Message containing additional information
          readOnly: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  parameters:
    ID:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Object ID of the Object
    Search:
      in: query
      name: search
      description: Filter items by name criteria
      schema:
        type: string
    Sort:
      in: query
      name: sort
      description: Sort by specified data field
      schema:
        type: string
    By:
      in: query
      name: sortby
      description: Sort ascending/descending?
      schema:
        type: string
        enum:
          - asc
          - desc
    Limit:
      in: query
      name: limit
      description: Limit fetch items in query
      schema:
        type: number
    Page:
      in: query
      name: page
      description: For pagination, specify current user page.
      schema:
        type: number
    Warehouse:
      in: query
      name: warehouse
      description: Fetch item by warehouse relation of item.
      schema:
        type: string
    startDate:
      in: query
      name: startDate
      description: Specify start date of time range.
      schema:
        type: string
        format: date
      example: "2020-12-01"
    endDate:
      in: query
      name: endDate
      description: Specify end date of time range.
      schema:
        type: string
        format: date
      example: "2020-12-31"

  responses:
    Warehouse:
      description: Action completed successfully, warehouse(s) data will shown to user
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/components/schemas/Warehouse"
              message:
                type: string
    Item:
      description: Action completed successfully, item data will shown to user
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/components/schemas/Item"
              message:
                type: string
    Items:
      description: Action completed successfully, items data will shown to user
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
              totalPages:
                description: Total available rest of pages
                type: number
              message:
                type: string
    Transaction:
      description: Action completed successfully, transaction data will shown to user
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/components/schemas/Transaction"
              message:
                type: string
    Transactions:
      description: Action completed successfully, transactions data will shown to user
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
              totalPages:
                description: Total available rest of pages
                type: number
              message:
                type: string
    400:
      description: "User Input not Accepted, caused by Invalid input"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
    401:
      description: "User access not authorized, caused by missing token header or invalid login information"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
    403:
      description: "User access forbidden, caused by user didn't satisfy required role"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
    404:
      description: "Requested object not found, caused by unknown user requested entity"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
    409:
      description: "Object cannot be created or accessed, caused by conflicting user input with target entity"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
    500:
      description: "Server cannot handling this request at this moment, caused by server down or other unspecified reason(s)"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"