openapi: 3.0.0

info:
  version: 0.1.8
  title: MR Management System
  description: "
    \n\n ## ðŸš€ Introduction
    \n\n MMS is an application that provides API logic for simple warehouse stock management with ease. Some key features:
    \n\n - Role based access
    \n\n - Transaction assessment
    \n\n - Monthly stock opname reporting
    \n\n - Empty stock reminder
    \n\n - Deployable to serverless
    \n\n - ...and much still in development
    \n\n This API Documented using OpenAPI 3.0.
    \n\n ## ðŸ”¨ Setup
    \n\n This app use express to run the web server, and mongoose (MongoDB) for model data mapping, which would need to set up node.js environment.
    \n\n ## Requirments
    \n\n - Computer with Windows 10 or Linux
    \n\n - Node.js 14 or greater
    \n\n - MongoDB [Atlas instance](https://mongodb.com/cloud/atlas)
    \n\n ## Configuration
    \n\n 1. Clone this repository, enter project directory
    \n\n 2. Rename `.env.example` file to `.env`
    \n\n 3. Open the `.env` file and customize the configuration
    \n\n The configuration consist of:
    \n\n ```
    \n\n # Application Configuration
    \n SVR_PORT        // Default app listen port
    \n CLUSTER         // Set to true to use nodejs multithread feature
    \n THREAD_LIMIT    // Adjust maximum cluster thread limit
    \n 
    \n\n # Database Configuration
    \n DB_HOST         // Database namehost
    \n DB_NAME         // Database name
    \n DB_USERNAME     // Database access username
    \n DB_PASSWORD     // Database access password
    \n 
    \n\n # CORS Configurations
    \n CORS_WHITELIST  // Provide whitelist site (separate with semicolons ';')
    \n 
    \n\n # JsonWebToken Configuration (JWT)
    \n JWT_ACCESSTOKEN_TTL     // JWT expiry time, use 'ms' format (https://github.com/vercel/ms)
    \n JWT_REFRESHTOKEN_TTL    // JWT refresh expiry time, use 'ms' format
    \n JWT_PRIVATE_KEY         // Specify private key to encrypt JWT token
    \n\n ```
    \n\n ### Installation
    \n\n Open terminal in project directory, and enter this command for development env:
    \n\n ```
    \n npm install
    \n npm run dev
    \n\n ```
    \n\n For production environment, instead use this command:
    \n\n ```
    \n npm install
    \n npm run build
    \n npm start
    \n\n ```
    \n\n This will install all dependencies and run the app.
    "
  license:
    name: ISC
    url: "https://spdx.org/licenses/ISC"

servers:
  - description: Server 1
    url: "/"

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: New User Registration
      description: "Registering new user, providing basic user information in request body \n\n (**Admin Role Required!**)"
      security:
       - bearerAuth: []
      requestBody:
        description: New User Information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: New User Registration Completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate User Login
      description: "User Login Access. Returning JWT Access and/or Refresh Token used for client HTTP Header"
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Username for user login credentials (Must unique)
                password:
                  type: string
                  description: User password credentials
                rememberMe:
                  type: boolean
                  description: "Boolean indicating if user want their login to be remembered.\n\n(*When 'false' provided, server will returning 'accessToken' value in 'refreshToken' field instead*)"
        required: true
      responses:
        200:
          description: Credentials accepted, JWT Token granted to client
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access Token
                  refreshToken:
                    type: string
                    description: JWT Refresh Token
        400:
          $ref: "#/components/responses/400"
          example:
            success: false
            message: Password is too short - should be 6 chars minimum.
        401:
          $ref: "#/components/responses/401"
          example:
            success: false
            message: Username atau password salah!
        500:
          $ref: "#/components/responses/500"
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh User accessToken
      description: "Requesting new accessToken by providing active refreshToken to server"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: User active refresh token
        required: true
      responses:
        200:
          description: Refresh Token Accepted, new accessToken will be sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Access Token
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"

components:
  schemas:
    User:
      required:
        - username
        - password
        - name
        - affiliation
      type: object
      properties:
        _id:
          type: string
          description: Auto-generated unique BSON IDs
          readOnly: true
        username:
          type: string
          description: Username for user login credentials (Must unique)
        password:
          type: string
          description: User defined password
        name:
          type: string
          description: User real full name
        role:
          type: string
          description: List of allowed node
          enum:
            - user
            - admin
          default: user
        affiliation:
          type: string
          description: User vendor affiliation
        createdAt:
          type: string
          format: date-time
          description: Time when the task was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Time when the task was updated
          readOnly: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    400:
      description: "User Input not Accepted, caused by Invalid input"
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                default: false
              message:
                type: string
                description: Message containing about invalid user input
              errors:
                type: object
                description: Object containing stacktrace errors
            required:
              - success
              - message
              - errors
    401:
      description: "User access not authorized, caused by missing token header or invalid login information"
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                default: false
              message:
                type: string
                description: Message about user didn't have valid login information
              errors:
                type: object
                description: Object containing stacktrace errors
            required:
              - success
              - message
              - errors
    403:
      description: "User access forbidden, caused by user didn't satisfy required role"
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                default: false
              message:
                type: string
                description: Message about user didn't have required access level
              errors:
                type: object
                description: Object containing stacktrace errors
            required:
              - success
              - message
              - errors
    409:
      description: "Object cannot be created or accessed, caused by conflicting user input with target entity"
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                default: false
              message:
                type: string
                description: Message about conflicting user input
              errors:
                type: object
                description: Object containing stacktrace errors
            required:
              - success
              - message
              - errors
    500:
      description: "Server cannot handling this request at this moment, caused by server down or other unspecified reason(s)"
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                default: false
              message:
                type: string
              errors:
                type: object
                description: Object containing stacktrace errors
            required:
              - success
              - message
              - errors